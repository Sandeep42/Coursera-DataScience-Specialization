install.packages("h20")
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/rel-tibshirani/8/R")))
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/rel-tibshirani/8/R")))
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/rel-tibshirani/8/R")))
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/rel-tibshirani/8/R")))
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/rel-tibshirani/8/R")))
install.packages("h2o", type="source", repos=(c("http://h2o-release.s3.amazonaws.com/h2o/rel-tibshirani/8/R")))
library(h20)
library(h20)
library(h2o)
localH2O = h2o.init(nthreads=-1)
install.packages("sqldf")
install.packages("ggplot2")
install.packages("forecast")
install.packages("lubridate")
install.packages("ggplot2")
install.packages("ggplot2")
install.packages("reshape2")
install.packages("ISLR")
install.packages("caret")
install.packages("swirl")
lm
getClass()
getMethod(show)
install.packages("shiny")
install.packages("neuralnet")
require(neuralnet)
?infert
dim(iinfert)
dim(infert)
?"neuralnet"
install.packages("randomForest")
install.packages("randomForest")
install.packages("ISLR")
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
lm(y~x)
lm
new <- lm(y~x)
new
summary(new)
data("mtcars")
new <- lm(mpg ~ wt, data = mtcars)
summary(new)
confint(new)
mean(mtcars$wt)
3.21725-4.202635
install.packages("swirl")
library(swirl)
swirl()
install_from_swirl("Regression Models")
bye()
x <- c(0.61, 0.93, 0.83, 0.35, 0.54, 0.16, 0.91, 0.62, 0.62)
y <- c(0.67, 0.84, 0.6, 0.18, 0.85, 0.47, 1.1, 0.65, 0.36)
summary(lm(y~x))
data("mtcars")
lm(mpg ~ wt, ddata = mtcars)
head(mtcars)
lm(mpg ~ wt, data = mtcars)
x <- mtcars$mpg
y <- mtcars$wt
fit <- lm(y ~ x)
fit
predict(fit, mean(x), interval = "confidence")
predict(fit, data.frame(x=mean(x)), interval = ("confidence"))
??mtcars
?mtcars
install.packages(AppliedPredictiveModeling)
install.packages("AppliedPredictiveModeling")
install.packages("caret")
library(AppliedPredictiveModeling)
data(concrete)
library(caret)
set.seed(1000)
inTrain = createDataPartition(mixtures$CompressiveStrength, p = 3/4)[[1]]
training = mixtures[ inTrain,]
testing = mixtures[-inTrain,]
qplot(mixtures$Superplasticizer)
qplot(log(mixtures$Superplasticizer+1))
library(caret)
library(AppliedPredictiveModeling)
set.seed(3433)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
preProcess()
?preProcess
pca = preProcess(training, method = "pca", thresh = 0.8)
pca
View(predictors)
library(dplyr)
new <- select(training, starts_with("IL"))
View(new)
preProcess(new, method = "pca", thresh = 0.8)
pca_new <- preProcess(new, method = "pca", thresh = 0.8)
pca_new
pca_new()
train(pca)
train(pca_new, method = "glm")
train(pca_new, y= training$diagnosis,method = "glm")
install.packages("e1071")
train(pca_new, y= training$diagnosis,method = "glm")
modelFit <- train(diagnosis ~ ., method = "glm", data = training)
predictions <- predict(modelFit, newdata = testing)
confusionMatrix(predictions, testing$diagnosis)
data("mtcars")
head(mtcars)
pairs(~mpg+disp+drat+wt,data=mtcars,
main="Simple Scatterplot Matrix")
summary(mtcars)
attributes(mtcars)
cor(wt, mpg)
View(mtcars)
data(mtcars)
attach(mtcars)
pairs(mtcars)
plot(y=mpg, x=cyl)
View(mtcars)
library(ggplot2)
qplot(y=mpg, x=cyl)
qplot(y=mpg, x=cyl)
data(mtcars)
qplot(x=cyl,y=mpg,data = mtcars)
View(mtcars)
qplot(x=disp,y=mpg,data = mtcars)
library(dplyr)
qplot(x=am,y=mpg,data = mtcars)
qplot(x=hp,y=mpg,data = mtcars)
install.packages("GGally")
library(GGally)
ggpairs(mpg, columns = c("cyl","disp"))
ggpairs(mtcars, columns = c("cyl","disp","mpg","am"))
ggpairs(mtcars, columns = c(cyl,disp,mpg,am))
install.packages("ISLR")
library(ISLR)
library(MASS)
?Boston
plot(medv, lstat, data = Boston)
plot(medv, lstat, data = Boston)
plot(medv~lstat, data = Boston)
lm(medv~lstat, data = Boston)
fit1= lm(medv~lstat, data = Boston)
install.packages("imager", repos="https://cran.rstudio.com")
shiny::runGitHub("thirdwing/mxnet_shiny")
data("iris")
head(iris)
table(iris$Species)
table(iris$Sepal.Length, iris$Species)
library(ggplot2)
g <- ggplor(iris, aes(x= Sepal.Length, y= Sepa.Width))
g <- ggplot(iris, aes(x= Sepal.Length, y= Sepa.Width))
g
g <- ggplot(iris, aes(x= Sepal.Length, y= Sepa.Width)) + geom_dotplot()
g
g <- ggplot(iris, aes(x= Sepal.Length, y= Sepal.Width)) + geom_dotplot()
g
g <- ggplot(iris, aes(x= Sepal.Length, y= Sepal.Width)) + geom_point()
g
install.packages(ratt)
install.packages("rattle")
install.packages(c('rzmq','repr','IRkernel','IRdisplay'),
repos = c('http://irkernel.github.io/', getOption('repos')))
IRkernel::installspec()
setwd("C:/Users/Sandeep/Desktop")
df <- read.csv("Accelerometer-2011-04-11-13-28-18-brush_teeth-f1.txt")
View(df)
df <- read.csv("Accelerometer-2011-04-11-13-28-18-brush_teeth-f1.txt", sep = " ")
View(df)
df <- read.csv("Accelerometer-2011-04-11-13-28-18-brush_teeth-f1.txt", sep = " ", header = FALSE)
setwd("C:/Users/Sandeep/Notebooks/NanoLocalProject")
?strsplit
